on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   5.9.9
  ARTIFACT:     build-assets

name: Create Release

jobs:
  release:
    name: Release
    runs-on:  ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
          lfs: true

      - uses: robinraju/release-downloader@v1.8
        with:
          # The source repository path.
          # Expected format {owner}/{repo}
          # Default: ${{ github.repository }}
          repository: "terry-haire/nifskope"

          # A flag to set the download target as latest release
          # The default value is 'false'
          latest: true

          # # The name of the file to download.
          # # Use this field only to specify filenames other than tarball or zipball, if any.
          # # Supports wildcard pattern (eg: '*', '*.deb', '*.zip' etc..)
          # fileName: ""

          # # Download the attached tarball (*.tar.gz)
          # tarBall: true

          # # Download the attached zipball (*.zip)
          # zipBall: true

          # Relative path under $GITHUB_WORKSPACE to place the downloaded file(s)
          # It will create the target directory automatically if not present
          # eg: out-file-path: "my-downloads" => It will create directory $GITHUB_WORKSPACE/my-downloads
          out-file-path: "${{ env.SOURCE_DIR }}/build/nifskope_converter/release/"

          # A flag to set if the downloaded assets are archives and should be extracted
          # Checks all downloaded files if they end with zip, tar or tar.gz and extracts them, if true.
          # Prints a warning if enabled but file is not an archive - but does not fail.
          extract: true

          # token: "${{ secrets.github_token }}"

      - name: Zip Folder
        shell: bash
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          mkdir ${{ runner.temp }}/assets
          zip -r ${{ runner.temp }}/assets/${{ env.ARTIFACT }}.zip \
          ./build/nifskope_converter/release/ \
          ./src/models-and-animations/elric/ \
          ./src/convert.ps1
          ./src/data/
          ./src/plugins/xEdit/
          ./convert.bat
          ./README.md
          ./images/
          ./bin/

      - name: Save build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ runner.temp }}/assets/${{ env.ARTIFACT }}.zip

      # - name: Save build artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ env.ARTIFACT }}
      #     path: |
      #       ${{ env.SOURCE_DIR }}/build/nifskope_converter/release/
      #       ${{ env.SOURCE_DIR }}/src/models-and-animations/elric/
      #       ${{ env.SOURCE_DIR }}/src/convert.ps1
      #       ${{ env.SOURCE_DIR }}/src/data/
      #       ${{ env.SOURCE_DIR }}/src/plugins/xEdit
      #       ${{ env.SOURCE_DIR }}/convert.bat
      #       ${{ env.SOURCE_DIR }}/README.md
      #       ${{ env.SOURCE_DIR }}/images/
      #       ${{ env.SOURCE_DIR }}/bin/

      # - name: Download Artifacts
      #   id: download
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: ${{ env.ARTIFACT }}
      #     path: ${{ runner.temp }}/artifacts

      # - name: Zip Folder
      #   shell: bash
      #   working-directory: ${{ steps.download.outputs.download-path }}
      #   run: |
      #     mkdir ${{ runner.temp }}/assets
      #     zip -r ${{ runner.temp }}/assets/${{ env.ARTIFACT }}.zip .

      # - name: Conventional Changelog Action
      #   uses: TriPSs/conventional-changelog-action@v3
      #   with:
      #     github-token: ${{ secrets.github_token }}

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: create-release
        uses: actions/create-release@v1
        # if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          # tag_name: ${{ steps.changelog.outputs.tag }}
          # release_name: ${{ steps.changelog.outputs.tag }}
          # body: ${{ steps.changelog.outputs.clean_changelog }}
          tag_name: v${{ github.run_number }}
          release_name: v${{ github.run_number }}
          draft: false
          prerelease: true

      - name: Upload Release Asset
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ runner.temp }}/assets/${{ env.ARTIFACT }}.zip
          asset_name: fnv-to-fo4-v${{ github.run_number }}.zip
          asset_content_type: application/zip
